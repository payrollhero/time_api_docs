FORMAT: 1A
HOST: https://time.payrollhero.com

# PayrollHero Time API

# Group Authentication

See the 
[PayrollHero Auth API Documentation](http://docs.payrollheroauthapi.apiary.io/)
for details on to authenticate with our API.

# Group Core API

This API relies on references to objects in the
[PayrollHero Core API Documentation](http://docs.payrollherocoreapi.apiary.io/).
Please see that document for more details.

# Group Time App - Authorized

## Clockings [/api/v2/clockings{?token}]

__Clocking Kinds__

 + `clock_in` ... the employee is clocking in
 + `clock_out` ... the employee is clocking out
 + `break_in` ... the employee is going on break
 + `break_out` ... the employee is leaving break

__Clocking Object Param__

 + `account_id` (number, required) ... The account's id number as gotten from the employees endpoint
 + `employee_id` (number, required) ... The employee's id number as gotten from the employees endpoint
 + `kind` (enum, required) ... What kind of clocking is this? (see above)
 + `client_time` (number, required) ... Unix timestamp of when the employee performed this clocking
 + `scheduled_in_time` (number, optional) ... Unix timestamp of when the employee is expected to be in
 + `scheduled_out_time` (number, optional) ... Unix timestamp of when the employee is expected to be out
 + `latitude` (float, optional) ... Latitude where this clocking happened
 + `longitude` (float, optional) ... Longitude where this clocking happened
 + `ip_address` (string, optional) ... IP address of the client
 + `worksite_id` (number, optional) ... the id of the worksite this clocking should be tagged with
 + `reason` (text, optional) ... a reason the employee entered as to why they were early/late etc
 + `photo` (file or url, optional) ... a multi part file attachment or a url to an image with the employee's selfie (this one should be clear of any props)
 + `propped_photo` (file or url, optional) ... a multi part file attachment or a url to an image with the employee's selfie including props, only include if using props

__Scheduling Info Params__

 + `scheduled_in_time` (unix_timestamp, optional) ... The timestamp of the start of the schedule this clocking relates to
 + `scheduled_out_time` (unix_timestamp, optional) ... The timestamp of the end of the schedule this clocking relates to

__Metadata Headers__

Refer to [Common Headers](http://docs.payrollherocoreapi.apiary.io/#reference/common-headers) for more information.

__Logic around using Scheduling Info__

If the shift relates to a schedule the in/out times should be specified. If it is an unscheduled shift they should be blank or omitted.

### Create Clocking [POST]

__Scope Required:__ `write_clockings`

This endpoint will accept duplicated clockings, but it will return a status of `created` or `duplicate` depending
if a duplicate is detected. (see the two sample responses)

+ Parameters
  + token (string, required) ... Authentication Token
  + clocking (object) ... The clocking data object, see above for details

+ Request (application/json)

        {
          "clocking": {
            "account_id": "1",
            "employee_id": "1",
            "kind": "clock_in",
            "client_time": "1395106884",
            "latitude": "-98.1234",
            "longitude": "165.4321",
            "ip_address": "174.7.251.60",
            "worksite_id": "100",
            "scheduled_in_time": "1395106884",
            "scheduled_out_time": "1395107884",
        }

+ Response 200 (application/json)

        {
          "clocking": {
            "id": 123
          },
          "status": "duplicate"
        }

+ Response 200 (application/json)

        {
          "clocking": {
            "id": 123
          },
          "status": "created"
        }

# Group Time App - Unauthorized

## Unauthorized Clockings [/api/v2/unauthorized_clockings]

__Clocking Kinds__

 + `clock_in` ... the employee is clocking in
 + `clock_out` ... the employee is clocking out
 + `break_in` ... the employee is going on break
 + `break_out` ... the employee is leaving break

__Clocking Object Param__

 + `employee_username` (string, required) ... The employee's username
 + `kind` (enum, required) ... What kind of clocking is this? (see above)
 + `client_time` (number, required) ... Unix timestamp of when the employee performed this clocking
 + `latitude` (float, required) ... Latitude where this clocking happened
 + `longitude` (float, required) ... Longitude where this clocking happened
 + `ip_address` (string, optional) ... IP address of the client
 + `photo` (file or url, required) ... a multi part file attachment or a url to an image with the employee's selfie (this one should be clear of any props)
 + `reason` (text, optional) ... a reason the employee entered as to why they were early/late etc
 + `propped_photo` (file or url, optional) ... a multi part file attachment or a url to an image with the employee's selfie including props, only include if using props

### Create Unauthorized Clocking [POST]

__Scope Required:__ `write_clockings`

This endpoint will accept duplicated clockings, but it will return a status of `created` or `duplicate` depending
if a duplicate is detected. (see the two sample responses)

+ Parameters
  + clocking (object) ... The clocking data object, see above for details

+ Request (application/json)

        {
          "clocking": {
            "employee_username": "jdoe123",
            "kind": "clock_in",
            "client_time": "1395106884",
            "latitude": "-98.1234",
            "longitude": "165.4321",
            "ip_address": "174.7.251.60"
          }
        }

+ Response 200 (application/json)

        {
          "clocking": {
            "id": 123
          },
          "status": "duplicate"
        }

+ Response 200 (application/json)

        {
          "clocking": {
            "id": 123
          },
          "status": "created"
        }

+ Response 404 (application/json)

        {
             "error": "not_found",
             "error_description": "Employee jdoe123 Not Found"
        }